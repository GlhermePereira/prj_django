from django import forms
from appHome.models import Usuario
from django.core.exceptions import ValidationError

class FormLogin(forms.Form):
    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form_control', 'placeholder': 'Email'}))
    senha = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form_control', 'placeholder': 'Senha'}))

    def clean(self):
        cleaned_data = super().clean()
        email = cleaned_data.get("email")
        senha = cleaned_data.get("senha")

        try:
            user = Usuario.objects.get(email=email)  # Use objects.get() para buscar pelo e-mail
            if not user.check_password(senha):  # Usar check_password para verificar a senha
                raise ValidationError("Senha incorreta.")
        except Usuario.DoesNotExist:
            raise ValidationError("Usuário não encontrado.")

        return cleaned_data

class UsuarioManager(BaseUserManager):
    def create_user(self, email, senha=None, **extra_fields):
        if not email:
            raise ValueError('O email deve ser fornecido.')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(senha)  # Usa set_password para armazenar a senha criptografada
        user.save(using=self._db)
        return user

    def create_superuser(self, email, senha=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        return self.create_user(email, senha, **extra_fields)
